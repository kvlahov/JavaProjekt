/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlahov.client;

import com.kvlahov.client.components.NewPatientDialog;
import com.kvlahov.controller.PatientController;
import com.kvlahov.model.Patient;
import com.kvlahov.utils.Utilities;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.Box;
import javax.swing.JFrame;
import javax.swing.JMenu;

import javax.swing.UIManager;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import org.jdesktop.swingx.JXTable;
import org.jdesktop.swingx.decorator.ColorHighlighter;
import org.jdesktop.swingx.decorator.HighlightPredicate;
import org.jdesktop.swingx.decorator.Highlighter;
import org.jdesktop.swingx.decorator.HighlighterFactory;
import org.jdesktop.swingx.decorator.PatternPredicate;
import org.jdesktop.swingx.decorator.ShadingColorHighlighter;

/**
 *
 * @author lordo
 */
public class RegularUI extends javax.swing.JFrame implements Gui {

    /**
     * Creates new form RegularUI
     */
    public RegularUI() {
        initComponents();
        initContent();
        initTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        PatientsTable = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jXTable1 = new org.jdesktop.swingx.JXTable();
        jMenuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNew = new javax.swing.JMenuItem();
        miShowPatients = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(800, 650));
        getContentPane().setLayout(new java.awt.CardLayout());

        jLabel9.setText("Home");
        jPanel4.add(jLabel9);

        getContentPane().add(jPanel4, "card3");

        PatientsTable.setLayout(new java.awt.BorderLayout());

        jXTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1", "Ivo", "Ivic", "22/02/1995", "Male"},
                {"2", null, null, null, null},
                {"3", null, null, null, null},
                {"4", null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Surname", "Date Of Birth", "Sex"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jXTable1);

        PatientsTable.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        getContentPane().add(PatientsTable, "patientTable");

        jMenuBar.setBackground(new java.awt.Color(51, 204, 255));
        jMenuBar.setForeground(new java.awt.Color(51, 204, 255));
        jMenuBar.setMaximumSize(new java.awt.Dimension(94, 32769));
        jMenuBar.setPreferredSize(new java.awt.Dimension(94, 44));

        jMenu1.setBackground(new java.awt.Color(204, 255, 0));
        jMenu1.setText("Patient");

        miNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        miNew.setText("New");
        miNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewActionPerformed(evt);
            }
        });
        jMenu1.add(miNew);

        miShowPatients.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        miShowPatients.setText("Show All Patients");
        miShowPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miShowPatientsActionPerformed(evt);
            }
        });
        jMenu1.add(miShowPatients);

        jMenuBar.add(jMenu1);

        setJMenuBar(jMenuBar);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewActionPerformed
        // TODO add your handling code here:      
        NewPatientDialog dialog = new NewPatientDialog(this, true);
        dialog.setVisible(true);
    }//GEN-LAST:event_miNewActionPerformed

    private void miShowPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miShowPatientsActionPerformed
        mainCardLayout.show(getContentPane(), "patientTable");
    }//GEN-LAST:event_miShowPatientsActionPerformed

    /**
     * @param args the command line arguments
     */
    @Override
    public void start() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegularUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegularUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegularUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegularUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        Utilities.setDefaultsForJFrame();

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegularUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PatientsTable;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private org.jdesktop.swingx.JXTable jXTable1;
    private javax.swing.JMenuItem miNew;
    private javax.swing.JMenuItem miShowPatients;
    // End of variables declaration//GEN-END:variables
    private CardLayout mainCardLayout;

    private void initContent() {
        mainCardLayout = (CardLayout) getContentPane().getLayout();
        JMenu menuLogOut = new JMenu("Log Out");
        jMenuBar.add(Box.createHorizontalGlue());
        jMenuBar.add(menuLogOut);

        menuLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                menuLogOutMouseClicked(evt);
            }

        });

        setExtendedState(JFrame.MAXIMIZED_BOTH);

        //for CardLayout.show
//        mainCardLayout.addLayoutComponent(newPatientPanel, "newPatientPanel");
    }

    private void menuLogOutMouseClicked(MouseEvent evt) {
        this.dispose();
        LoginScreen.start();
    }

    private void initTable() {
        jXTable1.setModel(new PatientTableModel());
        
        jXTable1.addHighlighter(new ColorHighlighter(HighlightPredicate.ROLLOVER_ROW,
                null, Color.RED));

        Highlighter simpleStriping = HighlighterFactory.createSimpleStriping();
        PatternPredicate patternPredicate = new PatternPredicate("Ë†M", 1);
        ColorHighlighter magenta = new ColorHighlighter(patternPredicate, null,
                Color.MAGENTA, null, Color.MAGENTA);
        Highlighter shading = new ShadingColorHighlighter(
                new HighlightPredicate.ColumnHighlightPredicate(1));

        jXTable1.addHighlighter(simpleStriping);
                
    }

    private static class PatientTableModel extends AbstractTableModel {

        //https://tips4java.wordpress.com/2008/11/21/row-table-model/
        List<Patient> patients = PatientController.getPatients();

        private String[] columnNames = {
            "First Name",
            "Last Name",
            "Sex",
            "Date of birth"
        };

        @Override
        public int getRowCount() {
            return patients.size();
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            Patient p = patients.get(rowIndex);
            switch (columnIndex) {
                case 0:
                    return p.getName();
                case 1:
                    return p.getSurname();
                case 2:
                    return p.getSex().toString();
                case 3:
                    return p.getDateOfBirth().format(DateTimeFormatter.ofPattern("dd-MM-yyyy"));
                default:
                    return null;
            }
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }

    }

//        PatientsTable.add(table);
}
