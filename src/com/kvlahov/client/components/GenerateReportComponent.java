/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlahov.client.components;

import com.kvlahov.client.global.Constants;
import com.kvlahov.model.enums.ReportType;
import com.kvlahov.utils.Utilities;
import com.sun.corba.se.impl.orbutil.closure.Constant;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalDate;
import java.time.format.TextStyle;
import java.util.Locale;
import java.util.stream.Stream;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;

/**
 *
 * @author lordo
 */
public class GenerateReportComponent extends javax.swing.JPanel {

    /**
     * Creates new form GenerateReportComponent
     */
    private LocalDate selectedDate = LocalDate.now();
    private LocalDate startDate;
    private LocalDate endDate;
    private ReportType reportType = ReportType.DAILY;
    
    private ActionListener btnGenerateListener;

    public GenerateReportComponent() {
        initComponents();
        initUI();
    }

    public LocalDate getStartDate() {
        return startDate;
    }

    public LocalDate getSelectedDate() {
        return selectedDate;
    }

    public void setSelectedDate(LocalDate selectedDate) {
        this.selectedDate = selectedDate;
        setupDates(reportType);
        updateDateLabel();
    }

    public void setStartDate(LocalDate startDate) {
        this.startDate = startDate;
    }

    public LocalDate getEndDate() {
        return endDate;
    }

    private void setEndDate(LocalDate endDate) {
        this.endDate = endDate;
    }

    public ReportType getReportType() {
        return reportType;
    }

    public void setReportType(ReportType reportType) {
        this.reportType = reportType;
        setupDates(reportType);
        updateDateLabel();
    }

    public ActionListener getBtnGenerateListener() {
        return btnGenerateListener;
    }

    public void setBtnGenerateListener(ActionListener btnGenerateListener) {
        this.btnGenerateListener = btnGenerateListener;
    }

    private void setupDates(ReportType reportType1) {
        switch (reportType1) {
            case DAILY:
                this.startDate = null;
                this.endDate = null;
                break;
            case WEEKLY:
                this.startDate = Utilities.getStartOfWeek(selectedDate);
                this.endDate = startDate.plusDays(6);
                break;
            case MONTHLY:
                this.startDate = Utilities.getStartOfMonth(selectedDate);
                this.endDate = Utilities.getEndOfMonth(startDate);
                break;
            default:
                break;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        controlPane = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblDate = new javax.swing.JLabel();
        rbDaily = new javax.swing.JRadioButton();
        rbWeekly = new javax.swing.JRadioButton();
        rbMonthly = new javax.swing.JRadioButton();
        btnGenerate = new javax.swing.JButton();
        calendar = new com.toedter.calendar.JCalendar();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Generate report"));
        setLayout(new java.awt.BorderLayout());

        controlPane.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jLabel1.setText("For Period:");
        controlPane.add(jLabel1);

        lblDate.setText("N/A");
        controlPane.add(lblDate);

        rbDaily.setText("Daily");
        controlPane.add(rbDaily);

        rbWeekly.setText("Weekly");
        controlPane.add(rbWeekly);

        rbMonthly.setText("Monthly");
        controlPane.add(rbMonthly);

        btnGenerate.setText("Generate");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });
        controlPane.add(btnGenerate);

        add(controlPane, java.awt.BorderLayout.NORTH);
        add(calendar, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        if(btnGenerateListener != null) {
            btnGenerateListener.actionPerformed(evt);
        }
    }//GEN-LAST:event_btnGenerateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGenerate;
    private com.toedter.calendar.JCalendar calendar;
    private javax.swing.JPanel controlPane;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblDate;
    private javax.swing.JRadioButton rbDaily;
    private javax.swing.JRadioButton rbMonthly;
    private javax.swing.JRadioButton rbWeekly;
    // End of variables declaration//GEN-END:variables
    private ButtonGroup btnGroup = new ButtonGroup();

    private void initUI() {
        btnGroup.add(rbDaily);
        btnGroup.add(rbWeekly);
        btnGroup.add(rbMonthly);

        rbDaily.setActionCommand(ReportType.DAILY.name());
        rbWeekly.setActionCommand(ReportType.WEEKLY.name());
        rbMonthly.setActionCommand(ReportType.MONTHLY.name());

        calendar.getDayChooser().addPropertyChangeListener("day", (e) -> {
            setSelectedDate(Utilities.calendarToLocalDate(calendar.getCalendar()));
        });

        calendar.getMonthChooser().addPropertyChangeListener("month", (e) -> {
            setSelectedDate(Utilities.calendarToLocalDate(calendar.getCalendar()));
        });
        
        calendar.getYearChooser().addPropertyChangeListener("year", (e) -> {
            setSelectedDate(Utilities.calendarToLocalDate(calendar.getCalendar()));
        });

        Stream.of(controlPane.getComponents())
                .filter(c -> c instanceof JRadioButton)
                .map(c -> (JRadioButton) c)
                .forEach(rb -> {
                    rb.addActionListener(evt -> {
                        rbActionPerformed(evt);
                    });
                });

        rbDaily.setSelected(true);
        setSelectedDate(LocalDate.now());

    }

    private void updateDateLabel() {
        reportType = ReportType.valueOf(btnGroup.getSelection().getActionCommand());
        switch (reportType) {
            case DAILY:
                lblDate.setText(selectedDate.format(Constants.DATE_FORMAT));
                break;
            case WEEKLY:
                lblDate.setText(startDate.format(Constants.DATE_FORMAT) + " - " + endDate.format(Constants.DATE_FORMAT));
                break;
            case MONTHLY:
                lblDate.setText(startDate.getMonth().getDisplayName(TextStyle.FULL, Locale.getDefault()));
                break;
            default:
                break;
        }

    }

    private void rbActionPerformed(ActionEvent evt) {
        setReportType(ReportType.valueOf(btnGroup.getSelection().getActionCommand()));
    }

}
