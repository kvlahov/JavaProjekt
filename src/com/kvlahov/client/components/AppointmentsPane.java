/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlahov.client.components;

import com.kvlahov.model.Appointment;
import com.kvlahov.model.Doctor;
import com.kvlahov.model.Patient;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.text.DateFormatter;
import javax.swing.text.DefaultFormatterFactory;

/**
 *
 * @author lordo
 */
public class AppointmentsPane extends javax.swing.JPanel {

    private Patient patient = null;
    private Doctor currentDoctor;
    private Doctor originalDoctor;
    private List<Doctor> doctors;
    
    private Appointment appointment;

    private ActionListener btnAddAppointmentActionListener;
    private ActionListener currentDoctorChangedListener;

    private static final DateTimeFormatter DATE_FORMAT = DateTimeFormatter.ofPattern("dd/MM/yyyy");
    private static final DateTimeFormatter TIME_FORMAT = DateTimeFormatter.ofPattern("HH:mm");

    public AppointmentsPane(Patient patient, Doctor doctor, Appointment appointment, List<Doctor> doctors) {
        this.patient = patient;
        this.currentDoctor = doctor;
        this.appointment = appointment;
        this.doctors = doctors;

        initComponents();
        initUI();
        updateData();
    }

    public List<Doctor> getDoctors() {
        return doctors;
    }

    public void setDoctors(List<Doctor> doctors) {
        this.doctors = doctors;
    }

    public void setCurrentDoctorChangedListener(ActionListener currentDoctorChangedListener) {
        this.currentDoctorChangedListener = currentDoctorChangedListener;
    }

    public Patient getPatient() {
        return patient;
    }

    public void setPatient(Patient patient) {
        this.patient = patient;
        updatePatientUI(patient);
    }

    public Doctor getCurrentDoctor() {
        return currentDoctor;
    }

    public void setCurrentDoctor(Doctor doctor) {
        this.currentDoctor = doctor;
        updateDoctorUI(doctor);
    }

    public Appointment getAppointment() {
        return appointment;
    }

    public void setAppointment(Appointment appointment) {
        this.appointment = appointment;
        updateAppointmentUI(appointment);
    }

    public void setBtnAddAppointmentActionListener(ActionListener btnAddAppointmentActionListener) {
        this.btnAddAppointmentActionListener = btnAddAppointmentActionListener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfDate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        tfStartTime = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        tfEndTime = new javax.swing.JFormattedTextField();
        btnAddAppointment = new javax.swing.JButton();
        lblPatient = new javax.swing.JLabel();
        lblDoctor = new javax.swing.JLabel();
        cbAnotherDoctor = new javax.swing.JCheckBox();
        ddlDoctors = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        lblOriginalDoctor = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Schedule an appointment"));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 9);
        add(jLabel1, gridBagConstraints);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Schedule with Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 9);
        add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 9);
        add(jLabel3, gridBagConstraints);

        tfDate.setColumns(10);
        tfDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(tfDate, gridBagConstraints);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Start time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 9);
        add(jLabel4, gridBagConstraints);

        tfStartTime.setColumns(10);
        tfStartTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(tfStartTime, gridBagConstraints);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("End time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 9);
        add(jLabel5, gridBagConstraints);

        tfEndTime.setColumns(10);
        tfEndTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(tfEndTime, gridBagConstraints);

        btnAddAppointment.setText("Add Appointment");
        btnAddAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAppointmentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(btnAddAppointment, gridBagConstraints);

        lblPatient.setText("N/A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(lblPatient, gridBagConstraints);

        lblDoctor.setText("N/A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(lblDoctor, gridBagConstraints);

        cbAnotherDoctor.setText("Choose another");
        cbAnotherDoctor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbAnotherDoctorItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(cbAnotherDoctor, gridBagConstraints);

        ddlDoctors.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ddlDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlDoctorsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.ipadx = 30;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(ddlDoctors, gridBagConstraints);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Original Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 10);
        add(jLabel6, gridBagConstraints);

        lblOriginalDoctor.setText("N/A");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 2, 5, 0);
        add(lblOriginalDoctor, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAppointmentActionPerformed
        if (btnAddAppointmentActionListener == null) {
            return;
        }
        
        if(appointment == null) {
            JOptionPane.showMessageDialog(null, "Select an appointment", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        appointment.setPatientId(patient.getId());
        appointment.setDoctorId(currentDoctor.getId());

        LocalDate date = LocalDate.parse(tfDate.getText(), DATE_FORMAT);

        appointment.setStartTime(LocalDateTime.of(date, LocalTime.parse(tfStartTime.getText())));
        appointment.setEndTime(LocalDateTime.of(date, LocalTime.parse(tfEndTime.getText())));

        btnAddAppointmentActionListener.actionPerformed(evt);

    }//GEN-LAST:event_btnAddAppointmentActionPerformed

    private void cbAnotherDoctorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbAnotherDoctorItemStateChanged
        ddlDoctors.setEnabled(cbAnotherDoctor.isSelected());
    }//GEN-LAST:event_cbAnotherDoctorItemStateChanged

    private void ddlDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlDoctorsActionPerformed
        setCurrentDoctor((Doctor) ddlDoctors.getSelectedItem());

        if (currentDoctorChangedListener != null) {
            currentDoctorChangedListener.actionPerformed(evt);
        }
    }//GEN-LAST:event_ddlDoctorsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddAppointment;
    private javax.swing.JCheckBox cbAnotherDoctor;
    private javax.swing.JComboBox ddlDoctors;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel lblDoctor;
    private javax.swing.JLabel lblOriginalDoctor;
    private javax.swing.JLabel lblPatient;
    private javax.swing.JFormattedTextField tfDate;
    private javax.swing.JFormattedTextField tfEndTime;
    private javax.swing.JFormattedTextField tfStartTime;
    // End of variables declaration//GEN-END:variables

    private void updateData() {
        if (appointment != null) {
            updateAppointmentUI(appointment);
        }
        if (patient != null) {
            updatePatientUI(patient);
        }
        if (currentDoctor != null) {
            updateDoctorUI(currentDoctor);
        }
    }

    private void updateAppointmentUI(Appointment appointment) {
        tfDate.setText(appointment.getStartTime().toLocalDate().format(DATE_FORMAT));
        tfStartTime.setText(appointment.getStartTime().toLocalTime().format(TIME_FORMAT));
        tfEndTime.setText(appointment.getEndTime().toLocalTime().format(TIME_FORMAT));
    }

    private void updatePatientUI(Patient patient) {
        lblPatient.setText(patient.toString());
    }

    private void updateDoctorUI(Doctor patientsDoctor) {
        lblDoctor.setText(currentDoctor.toString());
    }

    private void initUI() {
        cbAnotherDoctor.setSelected(false);
        
        originalDoctor = currentDoctor;
        lblOriginalDoctor.setText(originalDoctor.toString());
        ddlDoctors.setModel(new DefaultComboBoxModel(doctors.toArray()));
        ddlDoctors.setSelectedItem(currentDoctor);
        ddlDoctors.setEnabled(false);
        
        tfDate.setEditable(false);
        tfStartTime.setEditable(false);
        tfEndTime.setEditable(false);
    }
}
