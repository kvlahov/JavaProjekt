/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlahov.client.components;

import com.kvlahov.controller.AppointmentsController;
import com.kvlahov.controller.DoctorController;
import com.kvlahov.controller.PatientController;
import com.kvlahov.exceptions.InvalidModelException;
import com.kvlahov.model.Appointment;
import com.kvlahov.model.Doctor;
import com.kvlahov.model.Patient;
import com.kvlahov.utils.Utilities;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author lordo
 */
public class AppointmentsPane extends javax.swing.JPanel {

    private Patient patient = null;
    private Doctor patientsDoctor;

    /**
     * Creates new form AppointmentsPane
     */
    public AppointmentsPane() {
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        ddlDoctors = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfDate = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        tfStartTime = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        tfEndTime = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        scheduledAppointments = new javax.swing.JList();
        addAppointment = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        doctorName = new javax.swing.JLabel();
        ddlPatients = new javax.swing.JComboBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Schedule an appointment"));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Patient");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jLabel1, gridBagConstraints);

        ddlDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlDoctorsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(ddlDoctors, gridBagConstraints);

        jLabel2.setText("Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Date");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jLabel3, gridBagConstraints);

        tfDate.setColumns(10);
        tfDate.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MM-yyyy"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(tfDate, gridBagConstraints);

        jLabel4.setText("Start time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jLabel4, gridBagConstraints);

        tfStartTime.setColumns(10);
        tfStartTime.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("HH:mm"))));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(tfStartTime, gridBagConstraints);

        jLabel5.setText("End time");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        add(jLabel5, gridBagConstraints);

        tfEndTime.setColumns(10);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(tfEndTime, gridBagConstraints);

        scheduledAppointments.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        scheduledAppointments.setEnabled(false);
        jScrollPane1.setViewportView(scheduledAppointments);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 0);
        add(jScrollPane1, gridBagConstraints);

        addAppointment.setText("Add Appointment");
        addAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(addAppointment, gridBagConstraints);

        jLabel6.setText("Assigned Doctor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 5);
        add(jLabel6, gridBagConstraints);

        doctorName.setText("doctor");
        add(doctorName, new java.awt.GridBagConstraints());

        ddlPatients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ddlPatientsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(ddlPatients, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void addAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentActionPerformed
        Appointment app = new Appointment();
        app.setPatientId(patient.getId());
        app.setDoctorId(((Doctor) ddlDoctors.getSelectedItem()).getId());

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MM-yyyy");
        LocalDate date = LocalDate.parse(tfDate.getText(), formatter);

        app.setStartTime(LocalDateTime.of(date, LocalTime.parse(tfStartTime.getText())));
        app.setEndTime(LocalDateTime.of(date, LocalTime.parse(tfEndTime.getText())));

        System.out.println(app.getStartTime());
        LocalDateTime now = LocalDateTime.now().truncatedTo(ChronoUnit.MINUTES);
        System.out.println(Utilities.toDate(now));

        try {
            AppointmentsController.setAppointment(app);
        } catch (InvalidModelException ex) {
            Logger.getLogger(AppointmentsPane.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_addAppointmentActionPerformed

    private void ddlDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlDoctorsActionPerformed
        setListModel(((Doctor) ddlDoctors.getSelectedItem()).getId());
    }//GEN-LAST:event_ddlDoctorsActionPerformed

    private void ddlPatientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ddlPatientsActionPerformed
        Patient p = (Patient) ddlPatients.getSelectedItem();
        doctorName.setText(DoctorController.getDoctorForPatient(p.getId()).toString());
    }//GEN-LAST:event_ddlPatientsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAppointment;
    private javax.swing.JComboBox ddlDoctors;
    private javax.swing.JComboBox ddlPatients;
    private javax.swing.JLabel doctorName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList scheduledAppointments;
    private javax.swing.JFormattedTextField tfDate;
    private javax.swing.JFormattedTextField tfEndTime;
    private javax.swing.JFormattedTextField tfStartTime;
    // End of variables declaration//GEN-END:variables

    private void initData() {
        patient = PatientController.getPatients().get(5);
        if (patient != null) {
            patientsDoctor = DoctorController.getDoctorForPatient(patient.getId());
        }

        doctorName.setText(patientsDoctor.toString());

        List<Doctor> doctors = DoctorController.getGeneralPhysicians();
        ddlDoctors.setModel(new DefaultComboBoxModel(doctors.toArray()));
        ddlDoctors.setEditable(false);
        ddlDoctors.setSelectedIndex(0);

        List<Patient> patients = PatientController.getPatients();
        ddlPatients.setModel(new DefaultComboBoxModel(patients.toArray()));
        ddlPatients.setEditable(false);
        ddlPatients.setSelectedItem(patient);

        tfDate.setText(LocalDate.now().format(DateTimeFormatter.ofPattern("dd-MM-yyyy")));
        tfStartTime.setText(LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm")));
        tfEndTime.setText(LocalTime.now().plusMinutes(30).format(DateTimeFormatter.ofPattern("HH:mm")));

        setListModel(((Doctor) ddlDoctors.getSelectedItem()).getId());
    }

    private void setListModel(int id) {
        SwingUtilities.invokeLater(() -> {
            List<Appointment> scheduledAppointments1 = AppointmentsController.getScheduledAppointments(id);
            DefaultListModel<Appointment> list = new DefaultListModel<>();

            scheduledAppointments1.forEach(app -> list.addElement(app));
            scheduledAppointments.setModel(list);
        });

    }
}
