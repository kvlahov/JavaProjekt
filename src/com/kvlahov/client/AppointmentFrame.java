/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.kvlahov.client;

import com.kvlahov.client.components.CalendarComponent;
import com.kvlahov.client.components.EditAppointmentComponent;
import com.kvlahov.controller.AppointmentsController;
import com.kvlahov.controller.DoctorController;
import com.kvlahov.controller.ServicesController;
import com.kvlahov.exceptions.InvalidModelException;
import com.kvlahov.model.Appointment;
import com.kvlahov.model.ServiceAppointment;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JPanel;

/**
 *
 * @author lordo
 */
public class AppointmentFrame extends javax.swing.JFrame {

    /**
     * Creates new form AppointmentFrame
     */
    private List<ServiceAppointment> servicesForAppointment;
    private Appointment appointment;

    public AppointmentFrame(Appointment appointment) {
        this.appointment = appointment;
        initFrame();
        initComponents();
        initData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    private void initData() {
        EditAppointmentComponent pane = new EditAppointmentComponent(
                ServicesController.getTypesOfService(),
                appointment,
                ServicesController.getServices()
        );

        servicesForAppointment = ServicesController.getServicesForAppointment(appointment);
        pane.setServicesForAppointment(servicesForAppointment);

        pane.setBtnSaveActionListener((e) -> {
            try {
                AppointmentsController.updateAppointment(pane.getAppointment());
                List<ServiceAppointment> newServicesForAppointment = pane.getServicesForAppointment();

                ServicesController.addServicesForAppointment(newServicesForAppointment);
                ServicesController.deleteServicesForAppointment(servicesToDelete(newServicesForAppointment));
            } catch (InvalidModelException ex) {
                Logger.getLogger(AppointmentFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        });

        pane.setBtnCancelActionListener((e) -> {
            getContentPane().remove(pane);
        });

        add(pane);
    }

    private List<ServiceAppointment> servicesToDelete(List<ServiceAppointment> newServicesForAppointment) {
        //return every item from old list that is not in new list
        return servicesForAppointment
                .stream()
                .filter(sa -> !newServicesForAppointment.contains(sa))
                .collect(Collectors.toList());
    }

    private void initFrame() {
        setLocationRelativeTo(null);
        setSize(800,600);
    }
}
